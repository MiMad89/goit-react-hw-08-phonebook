{"version":3,"file":"static/js/phonebook-page.01dc9f0c.chunk.js","mappings":"2NAGaA,EAAS,WACpB,IAAMC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,4BACE,wBAAI,2BACJ,kBAAOC,SALU,SAAAC,GAAC,OAAIH,GAASI,EAAAA,EAAAA,GAAcD,EAAEE,OAAOC,OAApC,EAKaC,YAAY,iBAGhD,ECbD,EAA+B,mCAA/B,EAA0E,4BAA1E,EAA+G,6B,oBCClGC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,EAEtBC,EAAgB,SAAAF,GAAK,OAAIA,EAAMC,SAASE,SAAnB,EACrBC,EAAc,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,KAAnB,EAEnBC,GAAwBC,EAAAA,EAAAA,IACjC,CAACR,EALuB,SAAAC,GAAK,OAAIA,EAAMQ,OAAV,IAM7B,SAACP,EAAUQ,GACP,MAAe,KAAXA,EACOR,EAEAA,EAASQ,QAAO,SAAAC,GAAO,OAC1BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOA,OADjB,GAIrC,ICZQK,EAAe,WAC1B,IAAMvB,GAAWC,EAAAA,EAAAA,MAGXuB,GADgBC,EAAAA,EAAAA,IAAYjB,GACOkB,KAAI,SAAAP,GAAO,OAAIA,EAAQC,IAAZ,IAmBpD,OACE,+BACE,kBAAMO,UAAWC,EAAkBC,SAnBlB,SAAA1B,GACnBA,EAAE2B,iBACF,IAAMX,EAAU,CACdC,KAAMjB,EAAEE,OAAO0B,SAASX,KAAKd,MAC7B0B,OAAQ7B,EAAEE,OAAO0B,SAASC,OAAO1B,OAGnC,GAAIkB,EAAmBF,SAASH,EAAQC,MAEtC,OADAjB,EAAEE,OAAO4B,QACFC,MAAM,GAAD,OAAIf,EAAQC,KAAZ,2BAGdpB,GAASmC,EAAAA,EAAAA,IAAWhB,IAEpBhB,EAAEE,OAAO4B,OACV,EAIG,WACE,kBAAON,UAAWC,EAAlB,SAA6B,UAC7B,kBACEQ,KAAK,OACLhB,KAAK,OACLb,YAAY,aACZ8B,MAAM,yIACNC,UAAQ,KAEV,kBAAOX,UAAWC,EAAlB,SAA6B,YAC7B,kBACEQ,KAAK,MACLhB,KAAK,SACLb,YAAY,qBAEZ8B,MAAM,oHACNC,UAAQ,KAEV,mBAAQX,UAAWC,EAAYQ,KAAK,SAApC,SAA6C,oBAMpD,ECrDD,GAAgB,aAAe,mCAAmC,iBAAmB,uCAAuC,OAAS,8BCqSxHG,EAAe,WAC1B,IAAM7B,GAAWe,EAAAA,EAAAA,IAAYV,GACvBf,GAAWC,EAAAA,EAAAA,MAIjB,OACE,eAAI0B,UAAWC,EAAAA,aAAf,SACGlB,EAASgB,KAAI,SAAAP,GAAO,OACnB,eAAqBQ,UAAWC,EAAAA,aAAhC,UACE,4BACE,2BACGT,EAAQC,KAAK,KAAGD,EAAQa,WAE3B,mBAAQI,KAAK,SAAS9B,MAAOa,EAAQqB,GAAIC,QAAS,kBAVtCD,EAUyDrB,EAAQqB,GAV1DxC,GAAS0C,EAAAA,EAAAA,IAAcF,IAA/B,IAACA,CAUsC,EAAlD,SAAkF,eAL7ErB,EAAQqB,GADE,KAc1B,E,UChSD,EArBkB,WAChB,IAAM5B,GAAYa,EAAAA,EAAAA,IAAYd,GACxBgC,GAAUlB,EAAAA,EAAAA,IAAYZ,GAE5B,OACE,4BACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,2BAAO,mBAIX,wBAAI,eACJ,SAACU,EAAD,KACA,SAACxB,EAAD,IACCa,GAAY,uBAAG,yBAA0B,SAAC2B,EAAD,IACzCI,IAAW,uBAAG,6CAGpB,C","sources":["components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsForm/ContactsForm.module.css?d5f2","redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","pages/Phonebook.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/contacts/filtersSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = e => dispatch(filterContact(e.target.value));\n\n  return (\n    <div>\n      <h3>Find contacts by name</h3>\n      <input onChange={handleFilter} placeholder=\"Enter name\" />\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactsForm\":\"ContactsForm_contactsForm__e2vze\",\"label\":\"ContactsForm_label__Z7jht\",\"button\":\"ContactsForm_button__zuUB3\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filters;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        if (filter === '') {\n            return contacts;\n        } else {\n            return contacts.filter(contact =>\n                contact.name.toLowerCase().includes(filter.filter),\n            );\n        }\n    },\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactsForm.module.css';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n\n  const stateContacts = useSelector(selectContacts);\n  const stateContactsNames = stateContacts.map(contact => contact.name);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n\n    if (stateContactsNames.includes(contact.name)) {\n      e.target.reset();\n      return alert(`${contact.name} is alredy in contacts`);\n    }\n\n    dispatch(addContact(contact));\n\n    e.target.reset();\n  };\n\n  return (\n    <>\n      <form className={css.contactsForm} onSubmit={handleSubmit}>\n        <label className={css.label}>Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label className={css.label}>Number</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter phone number\"\n          // pattern=\"^[+]?[0-9]{1,3}-?[0-9]{1,3}-?[0-9]{1,3}-?[0-9]{2,4}$\"\n          title=\"Phone number must be 11 digits and can contain numbers, spaces, dashes, pot-bellied brackets and can start with +\"\n          required\n        />\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\n\n// import {Button, TextField} from '@mui/material';\n\n// const styles = {\n//   container: ['flex', 'justify-center'].join(' '),\n//   form: ['flex', 'flex-col', 'items-start', 'max-w-sm'].join(' '),\n//   label: ['flex', 'flex-col', 'mb-5', 'w-60'].join(' '),\n// };\n\n// export const ContactsForm = ({ onSubmit}) => {\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     onSubmit(e);\n//   };\n\n//   return (\n//     <div className={styles.container}>\n//     <form onSubmit={handleSubmit} className={styles.form}>\n//       <label className={styles.label}>\n//         <TextField\n//           type=\"text\"\n//           size=\"small\"\n//           name=\"name\"\n//           label=\"Name\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n//       </label>\n\n//       <label className={styles.label}>\n//         <TextField\n//           type=\"tel\"\n//           size=\"small\"\n//           name=\"number\"\n//           label=\"Number\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//         />\n//       </label>\n\n//       <Button type=\"submit\" variant=\"contained\" style={{ margin: '0 auto' }}>\n//         Save\n//       </Button>\n//     </form>\n//   </div>\n// );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__ZQI1L\",\"contactsListItem\":\"ContactsList_contactsListItem__DDy5j\",\"button\":\"ContactsList_button__EDc5e\"};","// import { useState } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { selectVisibleContacts } from 'redux/contacts/selectors';\n// import { deleteContact, editContact } from 'redux/contacts/operations';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n// import { red } from '@mui/material/colors';\n// import {\n//   Table,\n//   TableHead,\n//   TableRow,\n//   TableCell,\n//   TableBody,\n//   IconButton,\n//   Tooltip,\n//   TableSortLabel,\n//   TablePagination,\n//   Button,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogContentText,\n//   DialogTitle,\n// } from '@mui/material';\n// import { ContactModal } from '../ContactModal/ContactModal';\n// import { ContactsForm } from '../ContactsForm/ContactsForm';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) return -1;\n//   if (b[orderBy] > a[orderBy]) return 1;\n//   return 0;\n// }\n\n// function getComparator(order, orderBy) {\n//   return order === 'desc'\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n\n// const sortedRowInformation = (rowArray, comparator) => {\n//   const stabilizedRowArray = rowArray.map((el, index) => [el, index]);\n//   stabilizedRowArray.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n\n//   return stabilizedRowArray.map(el => el[0]);\n// };\n\n// export const ContactsList = () => {\n//   const [orderDirection, setOrderDirection] = useState('asc');\n//   const [contactId, setContactId] = useState('');\n//   const [page, setPage] = useState(0);\n//   const [rowsPerPage, setRowsPerPage] = useState(5);\n//   const [open, setOpen] = useState(false);\n//   const [openDelete, setOpenDelete] = useState(false);\n//   const contacts = useSelector(selectVisibleContacts);\n//   const dispatch = useDispatch();\n//   const valueToOrderedBy = 'name';\n\n//   const handleOpenDelete = e => {\n//     setContactId(e.currentTarget.id);\n//     setOpenDelete(true);\n//   };\n\n//   const handleCloseDelete = () => {\n//     setOpenDelete(false);\n//   };\n\n//   const handleRequestSort = () => {\n//     const isAscending = orderDirection === 'asc';\n//     setOrderDirection(isAscending ? 'desc' : 'asc');\n//   };\n\n//   const createSortHandler = () => event => handleRequestSort();\n\n//   const handleChangePage = (event, newPage) => setPage(newPage);\n\n//   const handeChangeRowsPerPage = event => {\n//     setRowsPerPage(parseInt(event.target.value), 10);\n//     setPage(0);\n//   };\n\n//   const handleModalOpen = e => {\n//     setContactId(e.currentTarget.id);\n//     setOpen(true);\n//   };\n//   const handleModalClose = () => setOpen(false);\n\n//   const handleDeleteContact = () => {\n//     dispatch(deleteContact(contactId));\n//     toast.success('Contact deleted', {\n//       position: 'top-right',\n//       autoClose: 5000,\n//       hideProgressBar: false,\n//       closeOnClick: true,\n//       pauseOnHover: true,\n//       draggable: true,\n//       progress: undefined,\n//       theme: 'colored',\n//     });\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.target;\n//     const name = form.elements.name.value;\n//     const number = form.elements.number.value;\n\n//     const contactData = {\n//       name,\n//       number,\n//       contactId,\n//     };\n\n//     const regexName =\n//       /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u;\n//     if (!regexName.test(name)) {\n//       return toast.error('Please enter right name', {\n//         position: 'top-right',\n//         autoClose: 5000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//         progress: undefined,\n//         theme: 'colored',\n//       });\n//     }\n\n//     const regexPhone = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})$/;\n//     if (!regexPhone.test(number)) {\n//       return toast.error('Please enter the correct number xxx-xxx-xxx', {\n//         position: 'top-right',\n//         autoClose: 5000,\n//         hideProgressBar: false,\n//         closeOnClick: true,\n//         pauseOnHover: true,\n//         draggable: true,\n//         progress: undefined,\n//         theme: 'colored',\n//       });\n//     }\n\n//     dispatch(editContact(contactData));\n\n//     toast.info('Contact changed', {\n//       position: 'top-right',\n//       autoClose: 5000,\n//       hideProgressBar: false,\n//       closeOnClick: true,\n//       pauseOnHover: true,\n//       draggable: true,\n//       progress: undefined,\n//       theme: 'colored',\n//     });\n\n//     form.reset();\n//   };\n\n//   return (\n//     <>\n//       <Table>\n//         <TableHead>\n//           <TableRow>\n//             <TableCell sx={{ fontWeight: 900, width: '40%' }} key=\"name\">\n//               <TableSortLabel\n//                 active={valueToOrderedBy === 'name'}\n//                 direction={'name' ? orderDirection : 'asc'}\n//                 onClick={createSortHandler()}\n//               >\n//                 Name\n//               </TableSortLabel>\n//             </TableCell>\n//             <TableCell sx={{ fontWeight: 900 }} key={'number'}>\n//               Phone number\n//             </TableCell>\n//             <TableCell align=\"right\" sx={{ fontWeight: 900 }}>\n//               Actions\n//             </TableCell>\n//           </TableRow>\n//         </TableHead>\n//         <TableBody>\n//           {sortedRowInformation(\n//             contacts,\n//             getComparator(orderDirection, valueToOrderedBy)\n//           )\n//             .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//             .map(contact => (\n//               <TableRow key={contact.id}>\n//                 <TableCell>{contact.name}</TableCell>\n//                 <TableCell>{contact.number}</TableCell>\n//                 <TableCell align=\"right\">\n//                   <Tooltip title=\"Edit\">\n//                     <IconButton\n//                       aria-label=\"edit\"\n//                       id={contact.id}\n//                       sx={{\n//                         ':hover': {\n//                           color: '#1876D1',\n//                         },\n//                       }}\n//                       onClick={handleModalOpen}\n//                     >\n//                       <EditIcon />\n//                     </IconButton>\n//                   </Tooltip>\n//                   <Tooltip title=\"Delete\">\n//                     <IconButton\n//                       aria-label=\"delete\"\n//                       sx={{\n//                         color: red[500],\n//                         ':hover': {\n//                           color: '#e30022',\n//                         },\n//                       }}\n//                       id={contact.id}\n//                       onClick={handleOpenDelete}\n//                     >\n//                       <DeleteIcon fontSize=\"small\" />\n//                     </IconButton>\n//                   </Tooltip>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//         </TableBody>\n//       </Table>\n//       <TablePagination\n//         rowsPerPageOptions={[5, 10]}\n//         component=\"div\"\n//         count={contacts.length}\n//         rowsPerPage={rowsPerPage}\n//         page={page}\n//         onPageChange={handleChangePage}\n//         onRowsPerPageChange={handeChangeRowsPerPage}\n//       />\n//       <ContactModal\n//         open={open}\n//         handleModalClose={handleModalClose}\n//         title=\"Edit contact\"\n//       >\n//         <ContactsForm onSubmit={handleSubmit} />\n//       </ContactModal>\n\n//       <Dialog\n//         open={openDelete}\n//         onClose={handleCloseDelete}\n//         aria-labelledby=\"alert-dialog-title\"\n//         aria-describedby=\"alert-dialog-description\"\n//       >\n//         <DialogTitle id=\"alert-dialog-title\">Delete Contact</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText id=\"alert-dialog-description\">\n//             Are you sure you want to delete contact?\n//           </DialogContentText>\n//         </DialogContent>\n//         <DialogActions>\n//           <Button onClick={handleCloseDelete}>No</Button>\n//           <Button\n//             onClick={(handleCloseDelete, handleDeleteContact)}\n//             autoFocus\n//             variant=\"contained\"\n//           >\n//             Yes, I'm sure\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//       <ToastContainer\n//         position=\"top-right\"\n//         autoClose={5000}\n//         hideProgressBar={false}\n//         newestOnTop={false}\n//         closeOnClick\n//         rtl={false}\n//         pauseOnFocusLoss\n//         draggable\n//         pauseOnHover\n//         theme=\"colored\"\n//       />\n//     </>\n//   );\n// };\n\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from './ContactsList.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const handleDelete = (id) => dispatch(deleteContact(id));\n\n  return (\n    <ul className={css.contactsList}>\n      {contacts.map(contact => (\n        <li key={contact.id} className={css.contactsItem}>\n          <div>\n            <div>\n              {contact.name}: {contact.number}\n            </div>\n            <button type=\"submit\" value={contact.id} onClick={() => handleDelete(contact.id)}>\n              Delete\n            </button>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Filter } from 'components/Filter';\nimport { ContactsForm } from 'components/ContactsForm';\nimport { ContactsList } from '../components/ContactsList/ContactsList';\nimport { selectError, selectLoading } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nconst Phonebook = () => {\n  const isLoading = useSelector(selectLoading);\n  const isError = useSelector(selectError);\n\n  return (\n    <div>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n      </HelmetProvider>\n\n      <h2>Phonebook</h2>\n      <ContactsForm />\n      <Filter />\n      {isLoading ? <p>Loading contacts...</p> : <ContactsList />}\n      {isError && <p>Something went wrong. Try again later.</p>}\n    </div>\n  );\n};\n\nexport default Phonebook;\n"],"names":["Filter","dispatch","useDispatch","onChange","e","filterContact","target","value","placeholder","selectContacts","state","contacts","selectLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filters","filter","contact","name","toLowerCase","includes","ContactsForm","stateContactsNames","useSelector","map","className","css","onSubmit","preventDefault","elements","number","reset","alert","addContact","type","title","required","ContactsList","id","onClick","deleteContact","isError"],"sourceRoot":""}